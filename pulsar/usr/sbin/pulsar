#!/usr/bin/python

import socket
import time
import os
import os.path
import commands
import sys
import signal

# Global definitions
SONAR_PORT = 7777
LOG_DIR = "/var/network"
PID_DIR = "/var/run/network-discovery/"
PID_FILE = "/var/run/network-discovery/pulsar.pid"

def do_start():
	''' Make sure pulsar isn't running, otherwise write pid to file at startup '''
	if os.path.exists(PID_FILE):
		print "Pulsar appears to be running already, aborting!"
		sys.exit(1)
		
	try:
		pid = os.getpid()
		f = open(PID_FILE, "w")
		f.writelines("%d\n" % pid)
		f.close()
	except Exception, e:
		print "Could not write process ID to %s, aborting!" % PID_FILE
		sys.exit(2)
		
def signal_callback(signal, frame):
	''' Ensure that we still remove pid on SIGINT '''
	do_stop()
	
def do_stop():
	''' Cleanly shut down, i.e. remove PID_FILE '''
	os.remove(PID_FILE)
	sys.exit(0)

	
def pulse(hostname):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, True)
        sock.bind(("", 0)) # Use any port to send
        while True:
            # logged-in users
            logged_users = commands.getoutput("who | grep tty | awk {'print $1;'}").replace("\n", ",")                                       
                
            # identified users
            identities = commands.getoutput("find /home/*/.network-cloud/identity")
            str_identities = ""
            for identity in identities.split("\n"):
                user = identity.split("/")[2]
                cloudlogin = commands.getoutput("cat /home/%s/.network-cloud/identity | grep login | awk {'print $2;'}" % user)  
                storemd5 = commands.getoutput("cat /home/%s/.network-cloud/identity | grep storemd5 | awk {'print $2;'}" % user) 
                str_identities = str_identities + user + "=" + cloudlogin + "=" + storemd5 + "," 
            if str_identities[-1] == ",":
                str_identities = str_identities[:-1]
            sock.sendto("SIGNAL_NETWORK_PULSE###%(hostname)s###%(users)s###%(identities)s" % {'hostname':hostname, 'users':logged_users, 'identities':str_identities}, ("255.255.255.255", SONAR_PORT))            
            os.system("echo `date` > %s/last_pulse" % LOG_DIR)
            time.sleep(1)
    except Exception, detail:
        print detail
        os.system("echo \"%(error)s\" > %(log_dir)s/last_pulse" % {'error':detail, 'log_dir':LOG_DIR})

def main_run_loop():
	do_start()
	while True:
		pulse(hostname)
		time.sleep(1)
       
if __name__ == '__main__':
    ''' Main entry method '''
    # Register a signal handler, we're interested in SIGINT
    signal.signal(signal.SIGINT, signal_callback)
	
    os.system("mkdir -p %s" % LOG_DIR)
    if not os.path.exists(PID_DIR):
		# make pid dir
		os.makedirs(PID_DIR)
    hostname = commands.getoutput("hostname")
    
    if "--fork" in sys.argv:
		# Command line request to fork
		pid = os.fork()
		if not pid:
			main_run_loop()
    else:
		main_run_loop()

    sys.exit(0)
